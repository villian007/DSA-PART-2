import java.util.*;

public class Solution {

    int solve(String[] board , int n, int m)
	{
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */
		char[][] mat = new char[n][m];
		for(int i = 0; i<n;i++){
			mat[i] = board[i].toCharArray();
		}
		boolean[][] vis = new boolean[n][m];
		
		for(int i = 0; i<n; i++){
			for(int j = 0; j<m; j++){
				boolean flag = dfs(mat, vis, i, j, i, j, 0, mat[i][j]);
				if(flag == true) return 1;
			}
		}
		return 0;
	}

	 boolean  dfs(char[][] mat, boolean [][] vis, int si, int sj, int i, int j, int len, char ch){
		if(len >=4 && si == i && sj == j) return true;

		if(i < 0 || i >= mat.length || j<0 || j>= mat[0].length || vis[i][j] || mat[i][j] != ch) return false;

		vis[i][j] = true;
		boolean flag = dfs(mat, vis, si, sj, i, j+1, len+1, ch);// right
		flag = flag || dfs(mat, vis, si, sj, i, j-1 , len+1, ch); // left 
		flag = flag || dfs(mat, vis, si, sj, i-1, j, len+1, ch); // top
		flag = flag || dfs(mat, vis, si,sj, i+1, j, len+1, ch); // bottom
		vis[i][j] = false;
		return flag;
	}
	
	
}
